import { GoogleGenAI, Type } from "@google/genai";
import { AnalysisReportData } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const responseSchema = {
  type: Type.OBJECT,
  properties: {
    conclusion: {
      type: Type.STRING,
      description: "A summary conclusion about whether the text is likely written by AI or contains plagiarism. Must be in the same language as the input text.",
    },
    ai_detection_percentage: {
      type: Type.NUMBER,
      description: "An estimated percentage likelihood that the text was generated by AI (0-100). A higher score means more likely to be AI-generated.",
    },
    key_evidence: {
      type: Type.ARRAY,
      items: { type: Type.STRING },
      description: "Exactly three key sentences or phrases from the text that strongly suggest AI generation or plagiarism. Must be in the same language as the input text.",
    },
    revision_suggestions: {
      type: Type.ARRAY,
      items: {
        type: Type.OBJECT,
        properties: {
          suspicious_passage: {
            type: Type.STRING,
            description: "The original passage from the text that sounds robotic or unoriginal.",
          },
          suggestion: {
            type: Type.STRING,
            description: "A clear, concise suggestion on how to make the passage sound more human-written.",
          },
          rewritten_example: {
            type: Type.STRING,
            description: "A specific example of the rewritten, more natural-sounding passage.",
          },
        },
        required: ["suspicious_passage", "suggestion", "rewritten_example"],
      },
      description: "Exactly three prominent suggestions to make the text sound more human and less robotic. Each must include the AI-like passage, the suggestion, and a rewritten example. Must be in the same language as the input text.",
    },
  },
  required: ["conclusion", "ai_detection_percentage", "key_evidence", "revision_suggestions"],
};

export const analyzeText = async (text: string): Promise<AnalysisReportData> => {
  try {
    const systemInstruction = `You are an extremely critical AI and plagiarism detection expert. Your goal is to find any trace of robotic, unnatural, or AI-generated writing. Be very harsh and strict in your evaluation.
- Your entire response MUST be in the same language as the input text (e.g., Vietnamese input -> Vietnamese output).
- Your analysis must be ruthless. Identify patterns like overly perfect grammar, repetitive sentence starters, predictable transition words (e.g., 'Furthermore', 'In addition', 'Moreover'), a lack of personal voice, and an unnaturally balanced, uniform structure. These are strong indicators of AI.
- You must strictly adhere to the provided JSON schema.
- Provide a high percentage score for AI detection if you find these patterns. Do not be lenient. A score of 85% means it's definitely AI.
- Provide exactly 3 pieces of key evidence, quoting the parts of the text that sound most robotic.
- Provide exactly 3 revision suggestions. These suggestions must be concrete and aimed at completely transforming the text's voice. Suggest adding personal touches, using more varied sentence lengths, and breaking formal structures.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: `Please analyze the following text for AI-generation and plagiarism:\n\n---\n${text}\n---`,
      config: {
        systemInstruction,
        responseMimeType: "application/json",
        responseSchema: responseSchema,
        temperature: 0.2,
      },
    });

    const jsonString = response.text;
    const parsedJson = JSON.parse(jsonString);

    // Basic validation
    if (parsedJson.ai_detection_percentage === undefined || !parsedJson.conclusion || !parsedJson.revision_suggestions || parsedJson.revision_suggestions.length !== 3) {
        throw new Error("Invalid JSON structure received from API.");
    }
    
    return parsedJson as AnalysisReportData;
  } catch (error) {
    console.error("Error analyzing text with Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to analyze text. API Error: ${error.message}`);
    }
    throw new Error("An unknown error occurred during analysis.");
  }
};

export const rewriteText = async (originalText: string, report: AnalysisReportData): Promise<string> => {
  try {
    const suggestionsText = report.revision_suggestions
      .map(s => `- For the passage "${s.suspicious_passage}", the suggestion is: "${s.suggestion}".`)
      .join('\n');

    const systemInstruction = `You are a talented human writer, not an AI. Your job is to rewrite a text so that it sounds like it was written by a real person with a distinct, natural voice. The goal is to be undetectable by AI checkers (target: under 5% AI score).
- Core message must be preserved, but the style must be completely transformed.
- **Break AI patterns:** Actively avoid overly formal language, repetitive sentence structures, and common AI transition words.
- **Inject Personality:** Write with confidence and a clear point of view. Use stronger verbs and more vivid language. Don't be afraid to sound opinionated or passionate if the topic allows.
- **Vary Rhythm:** This is crucial. Mix short, punchy sentences with longer, more descriptive ones. Use sentence fragments for emphasis where appropriate. Create a natural flow.
- **Be Conversational:** Write as if you're talking to an intelligent friend. Use rhetorical questions or an aside in parentheses to add a human touch.
- **Apply the suggestions:** The provided analysis contains clues about what sounds robotic. Use them as a guide for what to change.
- Your output MUST ONLY be the final rewritten text. No introductions, no explanations, no "Here is the rewrite:". Just the text itself.
- The output language must match the input language.`;

    const prompt = `Based on the following analysis, please rewrite the original text.

Original Text:
---
${originalText}
---

Analysis & Suggestions for Improvement:
---
${suggestionsText}
---

Now, provide the rewritten text below:`;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        systemInstruction,
        temperature: 0.8,
      },
    });

    return response.text.trim();
  } catch (error) {
    console.error("Error rewriting text with Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to rewrite text. API Error: ${error.message}`);
    }
    throw new Error("An unknown error occurred during rewriting.");
  }
};